When would you want to use a remote repository rather than keeping all your work
local?

>> A remote reposistory is created when a project or project branch needs to
>> be hosted on GitHub. This could be for backup, code-sharing or collaborating 
>> purposes.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

>> Pulling changes manually gives you control over what changes of the remote
>> should be reflected in your local repository. Automatic syncing with remote
>> may add changes to local repository that you may not need at that point in 
>> time, disrupting your workflow.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

>> Forks are copies of repos GitHub makes under your account on the Github servers
>> without pulling down the repo locally, first. Forks give due credit to the 
>> orginal creator of the repo.
>> Clones are copies of repos you make form GitHub by pulling down the code form the 
>> repo locally on to your machine.
>> Branches are subsections of your repository containing experimental changes, hot-fixes,
>> new features etc. not currenty part of your production code(i.e master branch)
>>
>> Forks are used when you want to make changes to someone else's repo. Clones are 
>> used when you want to pull down a repo locally to your machine. Branches are used
>> to create subdivisions in the repo.

What is the benefit of having a copy of the last known state of the remote
stored locally?

>> Last known state of the remote lets us know how up-to-date or out-of-sync our local 
>> repo is compared to the remote repo. Further, using command "git fetch" Git can pull the 
>> changes made by collaborators ,since the last time you pulled or pushed, into a new branch 
>> (origin/branch_name) so that you may inspect the changes made to the remote before merging your code.  

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

>> Collaborating without Git or GitHub would be done through email exchanges.
>> The emails would contain only the files to which changes have been made so that 
>> they can be reviewed by other collaborators and incorporated into their local copy 
>> of the project. 
>> Merging code would be harder, so would be making experimental changes, reverting 
>> to a previous working build of the project near impossibble and find changes made by other
>> collaborators in bigger files of code a tedious process.
>> Conversations with collaborators on project changes would be easier.  

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

>> You would want to make changes separately in a branch when you are making experimental changes
>> or changes you want feedback on from your collaborators, before merging them into master branch.
>> Keeping up-to-date with master is tedious when working in separate branch.
>> Making all the changes in master could break master if there is an error in the code. 

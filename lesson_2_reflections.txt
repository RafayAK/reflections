What happens when you initialize a repository? Why do you need to do it?

>> "git init" creates a repository.
>> A hidden folder ".git" is created in the directory and the new repository is
>> initialized, containing all the files and sub-directories of that directory.
>> We need to initialize the directory so that it can store all the metadata
>> of the newly created repository and track all the files in that directory,
>> using the ".git" folder.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

>> Staging Area is an intermediate platform where all the files that the
>> programmer wants to commit can be added and only the specified files will
>> be committed, giving the programmer a fine grained control over the commits
>> to be added to the repository.
>> Commits made should be logically independent i.e. one commit per logical
>> change. So, instead of committing the entire directory by calling "git commit"
>> small changes can be committed through the use of staging area.

How can you use the staging area to make sure you have one commit per logical
change?

>> Staging area allows us to add individual files, to which a logical change has
>> been made, Instead of committing the entire working directory every time a
>> change has been made to any of the files in the directory. Staging area allows
>> us to document these individual changes with commit messages.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

>> Branches are helpful when you want to make experimental changes to your project
>> but do not want them to interfere with your stable master branch code  

How do the diagrams help you visualize the branch structure?

>> Diagrams help visualize the diiferent commits created across a project's history,
>> the parent commit of each commit and a reachablilty of commits across the timeline.
>> Diagrams also pinpoint exact location of diversion of a branch from another. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

>> Merging two branches together causes git to merge the the file(s) carried 
>> by each branch into a single file(s), which is the new commit linking both the 
>> branches i.e. The new resulting commit has two parents which are the two branches 
>> merged. 
>> We repersent mergeing in the diagram as a new commit(node) with links to the previous
>> HEADs of the two branches. It shows that mergeing of the branches result in a new 
>> commit which is a combination of the two merged branches.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

>>  PROS of Automatic Merging:
>> Automatic merging is simple to execute and alleviates the programer from the problem
>> of mergeing/combining two seperate branches of your repository.
>> If a conflict arrises during the merging process git locates the casue of the problem 
>> to the programer so that it can be resolved.
>> With automatic merging being so convinient it promotes the use of braches to keep 
>> experimental changes seperate.
>> 
>>  CONS of Automatic Merging:
>> All confilicts/ambiguties need to be resolved manually. Figuring them out can be tedious.
>> Auto merging gives you less contol of how and what will be merged form two branches.


